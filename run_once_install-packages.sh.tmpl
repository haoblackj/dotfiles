#!/bin/bash
# 未定義な変数があったら途中で終了する
set -u

mkdir -p ~/.config/gh

export GH_CONFIG_DIR=~/.config/gh

ln -snfv ~/.local/share/chezmoi/config.yml ~/.config/gh/




{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
{{     if ne (env "REMOTE_CONTAINERS") "true" }}
  sudo ln -snfv ~/.local/share/chezmoi/wsl.conf /etc/wsl.conf
  sudo sed -i.bak -r 's@http://(jp\.)?archive\.ubuntu\.com/ubuntu/?@https://ftp.udx.icscoe.jp/Linux/ubuntu/@g' /etc/apt/sources.list
  # WINHOME=/mnt/c/Users/$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
  # echo ${WINHOME}
  # cp -f .wslconfig ${WINHOME}/
  # cp -f .gitconfig ${WINHOME}/
  # cp -f ${PWD}/config.yml "${WINHOME}/Appdata/Roaming/GitHub CLI/config.yml"
{{ $zshPath := lookPath "zsh" }}
{{ if $zshPath }}
echo "zshインストール済"
{{ else }}
    echo "zshインストール"
    sudo apt update
    sudo apt install zsh -y
    chsh -s /usr/bin/zsh
{{ end }}
{{ $wsluPath := lookPath "xdg-open" }}
{{ if $wsluPath }}
echo "wsluインストール済"
{{ else }}
    echo "wsluインストール"
    sudo add-apt-repository ppa:wslutilities/wslu -y
    sudo apt update
    sudo apt install wslu -y

    sudo apt update -y && sudo apt upgrade -y && sudo apt install -y \
      apt-transport-https \
      ca-certificates \
      curl \
      gnupg-agent \
      software-properties-common \
      git \
      make \
      tig \
      tree \
      zip unzip
    sudo apt-get update -y
    sudo apt install -y xdg-utils
{{ end }}

{{ $ghPath := lookPath "gh" }}
{{ if $ghPath }}
echo "ghインストール済"
{{ else }}
    echo "ghインストールします"
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
    sudo apt update -y
    sudo apt install gh -y
    sudo apt-get install fzf -y
    gh extension install "kawarimidoll/gh-q"

{{ end }}

{{ $dockerPath := lookPath "docker" }}
{{ if $dockerPath }}
echo "dockerインストール済"
{{ else }}
    sudo ln -snfv ~/.local/share/chezmoi/my-settings.service /etc/systemd/system/my-settings.service
    sudo ln -snfv ~/.local/share/chezmoi/my-settings.sh /usr/local/bin/my-settings.sh
    sudo systemctl enable my-settings.service
    sudo apt install -y ca-certificates curl gnupg lsb-release
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
    sudo apt update
    sudo apt install -y docker-ce docker-compose-plugin
    sudo service docker start
    sudo usermod -aG docker $USER
    sudo systemctl enable docker
{{ end }}

    # sudo add-apt-repository ppa:longsleep/golang-backports -y
    # sudo apt install golang-go -y
    #cd ~
    #wget https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz
    #sudo tar -C /usr/local -xzf go1.20.3.linux-amd64.tar.gz
    #export Path := $PATH:/usr/local/go/bin
    # export GOPath := $HOME
    # export Path := $PATH:$GOPATH/bin
    # source .profile

{{ $asdfPath := lookPath "asdf" }}
{{ if $asdfPath }}
echo "asdfインストール済"
{{ else }}
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.3
    source ~/.profile
{{ end }}

# asdfで指定したプラグインがインストールされているか確認する関数
asdf_plugin_installed() {
  local plugin_name="$1"
  asdf plugin-list | grep -q "^${plugin_name}\s"
}

# ghqのインストールを確認し、インストールされていなければインストールする関数
install_ghq_if_not_exists() {
  if ! asdf_plugin_installed "ghq"; then
    asdf plugin add ghq
    asdf install ghq latest
    asdf global ghq latest
  fi
}

# ghqのインストールを確認し、インストールされていなければインストールする
install_ghq_if_not_exists

{{ $pecoPath := lookPath "peco" }}
{{ if $pecoPath }}
echo "pecoインストール済"
{{ else }}
    cd ~
    wget https://github.com/peco/peco/releases/download/v0.5.7/peco_linux_386.tar.gz
    tar xzvf peco_linux_386.tar.gz
    cd peco_linux_386
    sudo cp peco /usr/local/bin
{{ end }}

nvm_installed() {
  if [ -d "$HOME/.nvm" ] && [ -s "$HOME/.nvm/nvm.sh" ]; then
    return 0
  else
    return 1
  fi
}

if ! nvm_installed; then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
    source ~/.bashrc

    command -v nvm

    nvm install --lts

    npm --version

    npm install -g @bitwarden/cli

    bw login
fi
    #cd ~
    #git clone https://github.com/x-motemen/ghq
    #cd ghq
    #make install
    # go version
    # go install github.com/x-motemen/ghq@latest
    gh_signed_in() {
        gh auth status >/dev/null 2>&1
        }

    if ! gh_signed_in; then
        gh auth login -h github.com -p https -w
    fi

{{     end }}
{{   end }}
{{ end }}
