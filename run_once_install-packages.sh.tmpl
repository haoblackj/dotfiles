#!/bin/bash
# 未定義な変数があったら途中で終了する
set -u

{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
{{     if ne (env "REMOTE_CONTAINERS") "true" }}
  sudo ln -snfv ~/.local/share/chezmoi/wsl.conf /etc/wsl.conf
  sudo ln -snfv ~/.local/share/chezmoi/local.conf /etc/fonts/local.conf
  sudo ln -snfv ~/.local/share/chezmoi/keyboard.conf /etc/default/keyboard
  sudo sed -i.bak -r 's@http://(jp\.)?archive\.ubuntu\.com/ubuntu/?@https://ftp.udx.icscoe.jp/Linux/ubuntu/@g' /etc/apt/sources.list
  # WINHOME=/mnt/c/Users/$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
  # echo ${WINHOME}
  # cp -f .wslconfig ${WINHOME}/
  # cp -f .gitconfig ${WINHOME}/
  # cp -f ${PWD}/config.yml "${WINHOME}/Appdata/Roaming/GitHub CLI/config.yml"
{{ $zshPath := lookPath "zsh" }}
{{ if $zshPath }}
echo "zshインストール済"
{{ else }}
    echo "zshインストール"
    sudo apt update
    sudo apt install zsh -y
    chsh -s /usr/bin/zsh
{{ end }}
{{ $wsluPath := lookPath "xdg-open" }}
{{ if $wsluPath }}
echo "wsluインストール済"
{{ else }}
    echo "wsluインストール"
    sudo add-apt-repository ppa:wslutilities/wslu -y
    sudo apt update
    sudo apt install wslu -y

    sudo apt update -y && sudo apt upgrade -y && sudo apt install -y \
      apt-transport-https \
      ca-certificates \
      curl \
      gnupg-agent \
      software-properties-common \
      git \
      make \
      tig \
      tree \
      libnss3 \
      zip \
      unzip
    sudo apt-get update -y
    sudo apt install -y xdg-utils
    sudo apt install -y libgtk2.0-0 libgtk-3-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb libgbm-dev fonts-ipafont
    sudo apt install language-pack-ja -y
    sudo localectl set-locale LANG=ja_JP.UTF-8
{{ end }}

{{ $ghPath := lookPath "gh" }}
{{ if $ghPath }}
echo "ghインストール済"
{{ else }}
    echo "ghインストールします"
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
    sudo apt update -y
    sudo apt install gh -y
    sudo apt-get install fzf -y

{{ end }}

{{ $dockerPath := lookPath "docker" }}
{{ if $dockerPath }}
echo "dockerインストール済"
{{ else }}
    sudo ln -snfv ~/.local/share/chezmoi/my-settings.service /etc/systemd/system/my-settings.service
    sudo ln -snfv ~/.local/share/chezmoi/my-settings.sh /usr/local/bin/my-settings.sh
    sudo systemctl enable my-settings.service
    sudo apt install -y ca-certificates curl gnupg lsb-release
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
    sudo apt update
    sudo apt install -y docker-ce docker-compose-plugin
    sudo service docker start
    sudo usermod -aG docker $USER
    sudo systemctl enable docker
{{ end }}

{{ $asdfPath := lookPath "asdf" }}
{{ if $asdfPath }}
echo "asdfインストール済"
{{ else }}
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.3
    source ~/.profile
{{ end }}

# asdfで指定したプラグインがインストールされているか確認する関数
asdf_plugin_installed() {
  local plugin_name="$1"
  asdf plugin-list | grep -Fq "${plugin_name}"
}

# nvmをインストールするセクション
{{ $asdfPath := lookPath "asdf" }}
{{ if $asdfPath }}
echo "nvmインストール済"
{{ else }}
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
{{ end }}

# denoをインストールするセクション
{{ $asdfPath := lookPath "asdf" }}
{{ if $asdfPath }}
echo "denoインストール済"
{{ else }}
curl -fsSL https://deno.land/x/install/install.sh | sh
{{ end}}

# neovimをインストールするセクション
# Install neovim 0.5.
{{$neovimPath := lookPath "nvim"}}
{{if $neovimPath}}
echo "neovimインストール済"
{{else}}
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
chmod u+x nvim.appimage
./nvim.appimage --appimage-extract
sudo mv squashfs-root /
sudo ln -s /squashfs-root/AppRun /usr/local/bin/nvim
curl -fLo $HOME/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
{{end}}

# Install win32yank.
# クリップボード操作プログラム。
{{$win32yankPath := lookPath "win32yank"}}
{{if $win32yankPath}}
echo "win32yankインストール済"
{{else}}
curl -fLO https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip
unzip win32yank-x64.zip -d win32yank
chmod u+x win32yank/win32yank.exe
sudo mv win32yank/win32yank.exe /usr/local/bin/win32yank
rm -rf win32yank-x64.zip win32yank
{{ end }}

# Install xsel
# クリップボード操作プログラム。
{{$xselPath := lookPath "xsel"}}
{{if $xselPath}}
echo "xselインストール済"
{{else}}
sudo apt-get install -y xsel
{{ end }}

# Install lazyGit
# gitのGUIツール
{{$lazyGitPath := lookPath "lazygit"}}
{{if $lazyGitPath}}
echo "lazyGitインストール済"
{{else}}
LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
tar xf lazygit.tar.gz lazygit
sudo install lazygit /usr/local/bin
rm -rf lazygit.tar.gz
{{ end }}

# install ripgrep
# 検索ツール
{{$ripgrepPath := lookPath "rg"}}
{{if $ripgrepPath}}
echo "ripgrepインストール済"
{{else}}
sudo apt-get install -y ripgrep
{{ end }}

# install fd
# 検索ツール
{{$fdPath := lookPath "fd"}}
{{if $fdPath}}
echo "fdインストール済"
{{else}}
sudo apt install -y fd-find
mkdir -p ~/.local/bin
ln -s $(which fdfind) ~/.local/bin/fd
{{ end }}

# install gcc
# gcc
{{$gccPath := lookPath "gcc"}}
{{if $gccPath}}
echo "gccインストール済"
{{else}}
sudo apt install build-essential -y
{{ end }}


# ghqのインストールを確認し、インストールされていなければインストールする関数
install_ghq_if_not_exists() {
  if ! asdf_plugin_installed "ghq"; then
    asdf plugin add ghq
    asdf install ghq latest
    asdf global ghq latest
  fi
}

# ghqのインストールを確認し、インストールされていなければインストールする
install_ghq_if_not_exists

{{ $pecoPath := lookPath "peco" }}
{{ if $pecoPath }}
echo "pecoインストール済"
{{ else }}
    cd ~
    wget https://github.com/peco/peco/releases/download/v0.5.7/peco_linux_386.tar.gz
    tar xzvf peco_linux_386.tar.gz
    cd peco_linux_386
    sudo cp peco /usr/local/bin
{{ end }}

    gh_signed_in() {
        gh auth status >/dev/null 2>&1
        }

    if ! gh_signed_in; then
        gh auth login -h github.com -p https -w
    fi



# GitHub CLI の拡張機能がインストールされているか確認する関数
gh_extension_installed() {
  local extension_name="$1"
  gh extension list | grep -Fq "${extension_name}"
}

# GitHub CLI の拡張機能がインストールされていなければインストールする関数
install_gh_extension_if_not_exists() {
  local extension_name="$1"
  local extension_repo="$2"

  if ! gh_extension_installed "${extension_name}"; then
    gh extension install "${extension_repo}"
  fi
}

# 拡張機能のインストール状況を確認し、インストールされていなければインストールする
install_gh_extension_if_not_exists "kawarimidoll/gh-q" "https://github.com/kawarimidoll/gh-q"

{{     end }}
{{   end }}
{{ end }}
