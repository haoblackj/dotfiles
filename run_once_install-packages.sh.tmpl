#!/bin/bash
# 未定義な変数があったら途中で終了する
set -u

{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
{{     if ne (env "REMOTE_CONTAINERS") "true" }}
  sudo ln -snfv ~/.local/share/chezmoi/wsl.conf /etc/wsl.conf
  sudo ln -snfv ~/.local/share/chezmoi/local.conf /etc/fonts/local.conf
  sudo ln -snfv ~/.local/share/chezmoi/keyboard.conf /etc/default/keyboard
  sudo ln -snfv ~/.local/share/chezmoi/envrc /opt/etc/envrc
  # sudo sed -i.bak -r 's@http://(jp\.)?archive\.ubuntu\.com/ubuntu/?@https://ftp.udx.icscoe.jp/Linux/ubuntu/@g' /etc/apt/sources.list
  # WINHOME=/mnt/c/Users/$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
  # echo ${WINHOME}
  # cp -f .wslconfig ${WINHOME}/
  # cp -f .gitconfig ${WINHOME}/
  # cp -f ${PWD}/config.yml "${WINHOME}/Appdata/Roaming/GitHub CLI/config.yml"

{{ $zshPath := lookPath "zsh" }}
{{ if $zshPath }}
echo "zshインストール済"
{{ else }}
    echo "zshインストール"
    sudo apt update
    sudo apt install zsh -y
    chsh -s /usr/bin/zsh
{{ end }}

{{ $wsluPath := lookPath "xdg-open" }}
{{ if $wsluPath }}
echo "wsluインストール済"
{{ else }}
# wsluはwslからデフォルトブラウザを開くために必要
    echo "wsluインストール"
    sudo add-apt-repository ppa:wslutilities/wslu -y
    sudo apt update
    sudo apt install wslu -y

    sudo apt update -y && sudo apt upgrade -y && sudo apt install -y \
      apt-transport-https \
      ca-certificates \
      curl \
      gnupg-agent \
      software-properties-common \
      git \
      make \
      tig \
      tree \
      libnss3 \
      zip \
      unzip
    sudo apt-get update -y
    sudo apt install -y xdg-utils
    sudo apt install -y libgtk2.0-0 libgtk-3-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb libgbm-dev fonts-ipafont
    sudo apt install language-pack-ja -y
    sudo localectl set-locale LANG=ja_JP.UTF-8
{{ end }}

# pyenvとvirtualenvをインストールするセクション
{{ $pyenvPath := lookPath "pyenv" }}
{{ if $pyenvPath }}
echo "pyenvインストール済"
{{ else }}
echo "pyenvインストール開始"
sudo apt update && sudo apt install -y \
  build-essential \
  libssl-dev \
  zlib1g-dev \
  libbz2-dev \
  libreadline-dev \
  libsqlite3-dev \
  libncurses-dev \
  libffi-dev \
  liblzma-dev \
  tk-dev \
  uuid-dev \
  libnss3-dev \
  libgdbm-dev \
  libdb-dev \
  libexpat1-dev
git clone https://github.com/pyenv/pyenv.git ~/.pyenv
git clone https://github.com/pyenv/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
{{ end }}

# linuxbrewをインストールするセクション
{{ $linuxbrewPath := lookPath "brew" }}
{{ if $linuxbrewPath }}
echo "linuxbrewインストール済"
{{ else }}
echo "linuxbrewインストール開始"
sudo apt-get install build-essential procps curl file git
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
source ~/.bashrc
{{ end}}

{{ $ghPath := lookPath "gh" }}
{{ if $ghPath }}
echo "ghインストール済"
{{ else }}

    echo "ghインストール"
    brew install fzf
    brew install gh
{{ end }}

{{ $dockerPath := lookPath "docker" }}
{{ if $dockerPath }}
echo "dockerインストール済"
{{ else }}
    sudo ln -snfv ~/.local/share/chezmoi/my-settings.service /etc/systemd/system/my-settings.service
    sudo ln -snfv ~/.local/share/chezmoi/my-settings.sh /usr/local/bin/my-settings.sh
    sudo systemctl enable my-settings.service
    sudo apt install -y ca-certificates curl gnupg lsb-release
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
    sudo apt update
    sudo apt install -y docker-ce docker-compose-plugin
    sudo service docker start
    sudo usermod -aG docker $USER
    sudo systemctl enable docker
{{ end }}

# goをインストールするセクション
{{ $goPath := lookPath "go" }}
{{ if $goPath }}
echo "goインストール済"
{{ else }}
echo "goインストール開始"
sudo apt install -y golang-go
{{ end }}

# nvmをインストールするセクション
{{ $nvmPath := lookPath "nvm" }}
{{ if $nvmPath }}
echo "nvmインストール済"
{{ else }}
echo "nvmインストール開始"
brew install nvm
{{ end }}

# denoをインストールするセクション
{{ $denoPath := lookPath "deno" }}
{{ if $denoPath }}
echo "denoインストール済"
{{ else }}
curl -fsSL https://deno.land/x/install/install.sh | sh -s -- -y
{{ end}}

# neovimをインストールするセクション
# Install neovim 0.5.
{{$neovimPath := lookPath "nvim"}}
{{if $neovimPath}}
echo "neovimインストール済"
{{else}}
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.appimage
chmod u+x nvim-linux-x86_64.appimage
./nvim-linux-x86_64.appimage --appimage-extract
sudo mv squashfs-root /
sudo ln -s /squashfs-root/AppRun /usr/local/bin/nvim
# curl -fLo $HOME/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
{{end}}

# ghqをインストールするセクション
{{ $ghqPath := lookPath "ghq" }}
{{ if $ghqPath }}
echo "ghqインストール済"
{{ else }}
echo "ghqインストール開始"
brew install ghq
{{ end }}

# pecoをインストールするセクション
{{ $pecoPath := lookPath "peco" }}
{{ if $pecoPath }}
echo "pecoインストール済"
{{ else }}
echo "ghqインストール開始"
brew install ghq
{{ end }}

# lazygitをインストールするセクション
{{ $lazygitPath := lookPath "lazygit" }}
{{ if $lazygitPath }}
echo "lazygitインストール済"
{{ else }}
echo "lazygitインストール開始"
brew install lazygit
{{ end }}

# GitHub CLI ログイン確認
    gh_signed_in() {
        gh auth status >/dev/null 2>&1
    }

    if ! gh_signed_in; then
        gh auth login -h github.com -p https -w
    fi

# GitHub CLI の拡張機能がインストールされているか確認する関数
gh_extension_installed() {
  local extension_name="$1"
  gh extension list | grep -Fq "${extension_name}"
}

# GitHub CLI の拡張機能がインストールされていなければインストールする関数
install_gh_extension_if_not_exists() {
  local extension_name="$1"
  local extension_repo="$2"

  if ! gh_extension_installed "${extension_name}"; then
    gh extension install "${extension_repo}"
  fi
}

# 拡張機能のインストール状況を確認し、インストールされていなければインストールする
install_gh_extension_if_not_exists "kawarimidoll/gh-q" "https://github.com/kawarimidoll/gh-q"

{{     end }}
{{   end }}
{{ end }}
